{"ts":1363425865480,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * @author Eberhard Graether / http://egraether.com/\n */\n\nTHREE.TrackballControls = function(object, domElement) {\n\n  THREE.EventDispatcher.call(this);\n\n  var _this = this;\n  var STATE = {\n    NONE: -1,\n    ROTATE: 2,\n    ZOOM: 1,\n    PAN: 0,\n    TOUCH_ROTATE: 3,\n    TOUCH_ZOOM: 4,\n    TOUCH_PAN: 5\n  };\n\n  this.object = object;\n  this.domElement = (domElement !== undefined) ? domElement : document;\n\n  // API\n  this.enabled = true;\n\n  this.screen = {\n    width: 0,\n    height: 0,\n    offsetLeft: 0,\n    offsetTop: 0\n  };\n  this.radius = (this.screen.width + this.screen.height) / 4;\n\n  this.rotateSpeed = 3.14;\n  this.zoomSpeed = 20;\n  this.panSpeed = 0.3;\n\n  this.noRotate = false;\n  this.noZoom = false;\n  this.noPan = true;\n\n  this.staticMoving = false;\n  this.dynamicDampingFactor = 0.2;\n\n  this.minDistance = 0;\n  this.maxDistance = Infinity;\n\n  this.keys = [65 /*A*/ , 83 /*S*/ , 68 /*D*/ ];\n\n  // internals\n  this.target = new THREE.Vector3();\n\n  var lastPosition = new THREE.Vector3();\n\n  var _state = STATE.NONE,\n    _prevState = STATE.NONE,\n\n    _eye = new THREE.Vector3(),\n\n    _rotateStart = new THREE.Vector3(),\n    _rotateEnd = new THREE.Vector3(),\n\n    _zoomStart = new THREE.Vector2(),\n    _zoomEnd = new THREE.Vector2(),\n\n    _touchZoomDistanceStart = 0,\n    _touchZoomDistanceEnd = 0,\n\n    _panStart = new THREE.Vector2(),\n    _panEnd = new THREE.Vector2();\n\n  // events\n  var changeEvent = {\n    type: 'change'\n  };\n\n\n  // methods\n  this.handleResize = function() {\n\n    this.screen.width = window.innerWidth;\n    this.screen.height = window.innerHeight;\n\n    this.screen.offsetLeft = 0;\n    this.screen.offsetTop = 0;\n\n    this.radius = (this.screen.width + this.screen.height) / 4;\n\n  };\n\n  this.handleEvent = function(event) {\n\n    if (typeof this[event.type] == 'function') {\n\n      this[event.type](event);\n\n    }\n\n  };\n\n  this.getMouseOnScreen = function(clientX, clientY) {\n\n    return new THREE.Vector2(\n    (clientX - _this.screen.offsetLeft) / _this.radius * 0.5, (clientY - _this.screen.offsetTop) / _this.radius * 0.5);\n\n  };\n\n  this.getMouseProjectionOnBall = function(clientX, clientY) {\n\n    var mouseOnBall = new THREE.Vector3(\n    (clientX - _this.screen.width * 0.5 - _this.screen.offsetLeft) / _this.radius, (_this.screen.height * 0.5 + _this.screen.offsetTop - clientY) / _this.radius, 0.0);\n\n    var length = mouseOnBall.length();\n\n    if (length > 1.0) {\n\n      mouseOnBall.normalize();\n\n    } else {\n\n      mouseOnBall.z = Math.sqrt(1.0 - length * length);\n\n    }\n\n    _eye.copy(_this.object.position).sub(_this.target);\n\n    var projection = _this.object.up.clone().setLength(mouseOnBall.y);\n    projection.add(_this.object.up.clone().cross(_eye).setLength(mouseOnBall.x));\n    projection.add(_eye.setLength(mouseOnBall.z));\n\n    return projection;\n\n  };\n\n  this.rotateCamera = function() {\n\n    var angle = Math.acos(_rotateStart.dot(_rotateEnd) / _rotateStart.length() / _rotateEnd.length());\n\n    if (angle) {\n\n\tvar newX = ( new THREE.Vector3() ).crossVectors( _rotateStart, _rotateEnd ).normalize().x * 2;\n\tvar newY = ( new THREE.Vector3() ).crossVectors( _rotateStart, _rotateEnd ).normalize().y;\n\t\n\tif (newY > 2) { newY = 2; }\n\tif (newY < -2) { newY = -2; }\n\tvar axis = new THREE.Vector3( 0, newY, 0 ), quaternion = new THREE.Quaternion();\n\n\n      angle *= _this.rotateSpeed;\n\n      quaternion.setFromAxisAngle(axis, -angle);\n\n      _eye.applyQuaternion(quaternion);\n      _this.object.up.applyQuaternion(quaternion);\n\n      _rotateEnd.applyQuaternion(quaternion);\n\n      if (_this.staticMoving) {\n\n        _rotateStart.copy(_rotateEnd);\n\n      } else {\n\n        quaternion.setFromAxisAngle(axis, angle * (_this.dynamicDampingFactor - 1.0));\n        _rotateStart.applyQuaternion(quaternion);\n\n      }\n\n    }\n\n  };\n\n  this.zoomCamera = function() {\n\n    if (_state === STATE.TOUCH_ZOOM) {\n\n      var factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;\n      _touchZoomDistanceStart = _touchZoomDistanceEnd;\n      _eye.multiplyScalar(factor);\n\n    } else {\n\n      var factor = 1.0 + (_zoomEnd.y - _zoomStart.y) * _this.zoomSpeed;\n\n      if (factor !== 1.0 && factor > 0.0) {\n\n        _eye.multiplyScalar(factor);\n\n        if (_this.staticMoving) {\n\n          _zoomStart.copy(_zoomEnd);\n\n        } else {\n\n          _zoomStart.y += (_zoomEnd.y - _zoomStart.y) * this.dynamicDampingFactor;\n\n        }\n\n      }\n\n    }\n\n  };\n\n  this.panCamera = function() {\n\n    var mouseChange = _panEnd.clone().sub(_panStart);\n\n    if (mouseChange.lengthSq()) {\n\n      mouseChange.multiplyScalar(_eye.length() * _this.panSpeed);\n\n      var pan = _eye.clone().crossVectors(_this.object.up).setLength(mouseChange.x);\n      pan.add(_this.object.up.clone().setLength(mouseChange.y));\n\n      _this.object.position.add(pan);\n      _this.target.add(pan);\n\n      if (_this.staticMoving) {\n\n        _panStart = _panEnd;\n\n      } else {\n\n        _panStart.add(mouseChange.subVectors(_panEnd, _panStart).multiplyScalar(_this.dynamicDampingFactor));\n\n      }\n\n    }\n\n  };\n\n  this.checkDistances = function() {\n\n    if (!_this.noZoom || !_this.noPan) {\n\n      if (_this.object.position.lengthSq() > _this.maxDistance * _this.maxDistance) {\n\n        _this.object.position.setLength(_this.maxDistance);\n\n      }\n\n      if (_eye.lengthSq() < _this.minDistance * _this.minDistance) {\n\n        _this.object.position.addVectors(_this.target, _eye.setLength(_this.minDistance));\n\n      }\n\n    }\n\n  };\n\n  this.update = function() {\n\n    _eye.subVectors(_this.object.position, _this.target);\n\n    if (!_this.noRotate) {\n\n      _this.rotateCamera();\n\n    }\n\n    if (!_this.noZoom) {\n\n      _this.zoomCamera();\n\n    }\n\n    if (!_this.noPan) {\n\n      _this.panCamera();\n\n    }\n\n    _this.object.position.addVectors(_this.target, _eye);\n\n    _this.checkDistances();\n\n    _this.object.lookAt(_this.target);\n\n    if (lastPosition.distanceToSquared(_this.object.position) > 0) {\n\n      _this.dispatchEvent(changeEvent);\n\n      lastPosition.copy(_this.object.position);\n\n    }\n\n  };\n\n  // listeners\n  function keydown(event) {\n\n    if (_this.enabled === false) return;\n\n    window.removeEventListener('keydown', keydown);\n\n    _prevState = _state;\n\n    if (_state !== STATE.NONE) {\n\n      return;\n\n    } else if (event.keyCode === _this.keys[STATE.ROTATE] && !_this.noRotate) {\n\n      _state = STATE.ROTATE;\n\n    } else if (event.keyCode === _this.keys[STATE.ZOOM] && !_this.noZoom) {\n\n      _state = STATE.ZOOM;\n\n    } else if (event.keyCode === _this.keys[STATE.PAN] && !_this.noPan) {\n\n      _state = STATE.PAN;\n\n    }\n\n  }\n\n  function keyup(event) {\n\n    if (_this.enabled === false) return;\n\n    _state = _prevState;\n\n    window.addEventListener('keydown', keydown, false);\n\n  }\n\n  function mousedown(event) {\n\n    if (_this.enabled === false) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (_state === STATE.NONE) {\n\n      _state = event.button;\n\n    }\n\n    if (_state === STATE.ROTATE && !_this.noRotate) {\n\n      _rotateStart = _rotateEnd = _this.getMouseProjectionOnBall(event.clientX, event.clientY);\n\n    } else if (_state === STATE.ZOOM && !_this.noZoom) {\n\n      _zoomStart = _zoomEnd = _this.getMouseOnScreen(event.clientX, event.clientY);\n\n    } else if (_state === STATE.PAN && !_this.noPan) {\n\n      _panStart = _panEnd = _this.getMouseOnScreen(event.clientX, event.clientY);\n\n    }\n\n    document.addEventListener('mousemove', mousemove, false);\n    document.addEventListener('mouseup', mouseup, false);\n\n  }\n\n  function mousemove(event) {\n\n    if (_this.enabled === false) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (_state === STATE.ROTATE && !_this.noRotate) {\n\n      _rotateEnd = _this.getMouseProjectionOnBall(event.clientX, event.clientY);\n\n    } else if (_state === STATE.ZOOM && !_this.noZoom) {\n\n      _zoomEnd = _this.getMouseOnScreen(event.clientX, event.clientY);\n\n    } else if (_state === STATE.PAN && !_this.noPan) {\n\n      _panEnd = _this.getMouseOnScreen(event.clientX, event.clientY);\n\n    }\n\n  }\n\n  function mouseup(event) {\n\n    if (_this.enabled === false) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    _state = STATE.NONE;\n\n    document.removeEventListener('mousemove', mousemove);\n    document.removeEventListener('mouseup', mouseup);\n\n  }\n\n  function mousewheel(event) {\n\n    if (_this.enabled === false) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    var delta = 0;\n\n    if (event.wheelDelta) { // WebKit / Opera / Explorer 9\n      delta = event.wheelDelta / 40;\n\n    } else if (event.detail) { // Firefox\n      delta = -event.detail / 3;\n\n    }\n\n    _zoomStart.y += (1 / delta) * 0.05;\n\n  }\n\n  function touchstart(event) {\n\n    if (_this.enabled === false) return;\n\n    switch (event.touches.length) {\n\n    case 1:\n      _state = STATE.TOUCH_ROTATE;\n      _rotateStart = _rotateEnd = _this.getMouseProjectionOnBall(event.touches[0].pageX, event.touches[0].pageY);\n      break;\n\n    case 2:\n      _state = STATE.TOUCH_ZOOM;\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\n      _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);\n      break;\n\n    case 3:\n      _state = STATE.TOUCH_PAN;\n      _panStart = _panEnd = _this.getMouseOnScreen(event.touches[0].pageX, event.touches[0].pageY);\n      break;\n\n    default:\n      _state = STATE.NONE;\n\n    }\n\n  }\n\n  function touchmove(event) {\n\n    if (_this.enabled === false) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    switch (event.touches.length) {\n\n    case 1:\n      _rotateEnd = _this.getMouseProjectionOnBall(event.touches[0].pageX, event.touches[0].pageY);\n      break;\n\n    case 2:\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\n      _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy)\n      break;\n\n    case 3:\n      _panEnd = _this.getMouseOnScreen(event.touches[0].pageX, event.touches[0].pageY);\n      break;\n\n    default:\n      _state = STATE.NONE;\n\n    }\n\n  }\n\n  function touchend(event) {\n\n    if (_this.enabled === false) return;\n\n    switch (event.touches.length) {\n\n    case 1:\n      _rotateStart = _rotateEnd = _this.getMouseProjectionOnBall(event.touches[0].pageX, event.touches[0].pageY);\n      break;\n\n    case 2:\n      _touchZoomDistanceStart = _touchZoomDistanceEnd = 0;\n      break;\n\n    case 3:\n      _panStart = _panEnd = _this.getMouseOnScreen(event.touches[0].pageX, event.touches[0].pageY);\n      break;\n\n    }\n\n    _state = STATE.NONE;\n\n  }\n\n  this.domElement.addEventListener('contextmenu', function(event) {\n    event.preventDefault();\n  }, false);\n\n  this.domElement.addEventListener('mousedown', mousedown, false);\n\n  this.domElement.addEventListener('mousewheel', mousewheel, false);\n  this.domElement.addEventListener('DOMMouseScroll', mousewheel, false); // firefox\n  this.domElement.addEventListener('touchstart', touchstart, false);\n  this.domElement.addEventListener('touchend', touchend, false);\n  this.domElement.addEventListener('touchmove', touchmove, false);\n\n  window.addEventListener('keydown', keydown, false);\n  window.addEventListener('keyup', keyup, false);\n\n  this.handleResize();\n\n};"]],"start1":0,"start2":0,"length1":0,"length2":11259}]],"length":11259}
{"contributors":[],"silentsave":false,"ts":1363425876025,"patch":[[{"diffs":[[0,"noPan = "],[-1,"tru"],[1,"fals"],[0,"e;\n\n  th"]],"start1":720,"start2":720,"length1":19,"length2":20}]],"length":11260,"saved":false}
