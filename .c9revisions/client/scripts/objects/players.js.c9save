{"ts":1363623156137,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"  /*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\tPlayers\n\tThis class defines player objects\n\t\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/\n\nfunction playerInput(delta){\n\tvar keyboardInput = { d: delta, pZ: 0, pY: 0, rY: 0, fire: isFiring },\n\t\t\tmove = false;\n\t\n\tif (keyboard.pressed(\"W\")){\n\t\tif (player.velocity > -300) { player.velocity -= 10; }\n\t\tmove = true;\n\t\tkeyboardInput.pZ = 1;\n\t}\n\tif (keyboard.pressed(\"S\")){\n\t\tif (player.velocity < 150) { player.velocity += 10; }\n\t\tmove = true;\n\t\tkeyboardInput.pZ = -1;\n\t}\n\t// rotate left/right\n\tif (keyboard.pressed(\"A\")) {\n\t\tmove = true;\n\t\tkeyboardInput.rY = 1;\n\t}\n\tif (keyboard.pressed(\"D\")) {\n\t\tmove = true;\n\t\tkeyboardInput.rY = -1;\n\t}\n\tif (keyboard.pressed(\" \")) {\n\t\tmove = true;\n\t\tkeyboardInput.pY = 1;\n\t}\n\tif (keyboard.pressed(\"shift\")){\n\t\tmove = true;\n\t\tkeyboardInput.pY = -1;\n\t}\n\tif (isFiring == true) {\n\t\tmove = true;\n\t}\n\t\n\tif (move == true) {\n\t\tsocket.emit('move', keyboardInput);\n\t}\n\treturn keyboardInput;\n}\n\nfunction movePlayer(velocity, playerPosition, data) {\n\t\n\tvar \t\tvelocityYChange = 300 * data.d,\n\t\t\t\trotateAngle = 0.01744444444444444444444444444444 * 2;\n\n\tif (data.rY > 0) { data.rY = rotateAngle; }\t\t\t\t\t\t// left\n\tif (data.rY < 0) { data.rY = -rotateAngle; }\t\t\t\t\t\t// right\n\tdata.rY = (data.rY + data.rY * Math.PI / 180);\n\t\n\tif (data.pY > 0) { data.pY = velocityYChange; } \t\t\t// up\n\tif (data.pY < 0) { data.pY = -(velocityYChange); } \t\t// down\n\n\tdata.rY += player.rotation.y;\n\tdata.pY += player.position.y;\n\tdata.pX = playerPosition.x + velocity * Math.sin(player.rotation.y);\n\tdata.pZ = playerPosition.z + velocity * Math.cos(player.rotation.y);\n\t\n\tvar moveVector = new THREE.Vector3(data.pX, data.pY, data.pZ);\n\tvar playerPositionVector = new THREE.Vector3(playerPosition.x, playerPosition.y, playerPosition.z);\n\t\n\tvar collisions = detectCollision(playerPositionVector, moveVector, world_map);\n\t\n\tif (collisions.length > 0) {\n\t\tcollisions.forEach(function(collision, index){\n\t\t\tif (collision.distance < 90) {\n\t\t\n\t\t\t\tif (collision.point.x > playerPosition.x) \n\t\t\t\t\t{ data.rY -= collision.distance / 10000; }\n\t\t\t\tif (collision.point.x < playerPosition.x) \n\t\t\t\t\t{ data.rY += collision.distance / 10000; }\n\t\t\t\t\n\t\t\t\tif (data.pX != 0) {\n\t\t\t\t\tdata.pX  = player.position.x + data.pX * -.001;\n\t\t\t\t}\n\t\t\t\tif (data.pY != 0) {\n\t\t\t\t\tdata.pY = player.position.y;\n\t\t\t\t}\n\t\t\t\tif (data.pZ != 0) {\n\t\t\t\t\tdata.pZ  = player.position.z + data.pZ * -.001;\n\t\t\t\t}\n\t\t\t}\n\t\t}); \n\t}\n\t\n\tmoveShip(player, true, { name: \"move\", type: \"player\", details: data });\n\t\t\n\t$(\"#playerPosition\").html(\"<div><strong>Player</strong><br />pX:&nbsp;\"+Math.round(player.position.x)+\"<br />pY:&nbsp;\"+Math.round(player.position.y)+\"<br />pZ:&nbsp;\"+Math.round(player.position.z)+\"<br />rY:&nbsp;\"+Math.round(player.rotation.y)+\"<br />d:&nbsp;\" + Math.round(data.d * 1000) + \"</div>\");\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":3351}]],"length":3351}
{"contributors":[],"silentsave":false,"ts":1363623189315,"patch":[[{"diffs":[[0,"sions = "],[1,"events."],[0,"detectCo"]],"start1":2337,"start2":2337,"length1":16,"length2":23}]],"length":3358,"saved":false}
{"ts":1363623202035,"patch":[[{"diffs":[[0," \n\t}\n\t\n\t"],[1,"events."],[0,"moveShip"]],"start1":2967,"start2":2967,"length1":16,"length2":23}]],"length":3365,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363689597614,"patch":[[{"diffs":[[0,"sions = "],[-1,"events"],[1,"socket"],[0,".detectC"]],"start1":2337,"start2":2337,"length1":22,"length2":22}]],"length":3365,"saved":false}
