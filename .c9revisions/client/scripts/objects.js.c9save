{"ts":1363623158409,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\tObjects\n\tThis defines object methods and proxies the sub class functions \n\t\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/\n\nvar\tcache = [],\n\t\tworld_map = [];\n\nfunction loadObject(instruction) {\n\tvar loader = new THREE.JSONLoader();\n\tvar cacheIndex = -1;\n\tcache.forEach(function(cachedObject, index){ if (instruction.url == cachedObject.url) { cacheIndex = index;} });\n\tvar  x = instruction.position.x,\n\t\ty = instruction.position.y,\n\t\tz = instruction.position.z,\n\t\tscale = instruction.scale, \n\t\ttype = instruction[\"class\"]; \n\t\n\tif (cacheIndex >= 0) {\n\t\tvar cachedObject = cache[cacheIndex];\n\t\tmesh = makeObjectMesh(type, cachedObject.geometry, cachedObject.materials, x, y, z , scale);\n\t\trenderObject(mesh, type, instruction);\n\t}\n\telse {\n\t\tloader.load(instruction.url, function(geometry, materials) {\n\t\t\tmesh = makeObjectMesh(type, geometry, materials, x, y, z , scale);\n\t\t\tvar cachedObject = { url: instruction.url, geometry: geometry, materials: materials};\n\t\t\tcache.push(cachedObject);\t\n\t\t\trenderObject(mesh, type, instruction);\n\t\t});\n\t}\n}\nfunction makeObjectMesh(objectType, geometry, materials, x, y, z, scale) {\n\tvar useVertexOverrides = false;\n\tif ((objectType != \"ship\")&&(objectType != \"players\")&&(objectType != \"bot\")) {\n\t\tuseVertexOverrides = true;\n\n\t}\n\tmaterials.forEach(function(material, index){\n\n\t\tif (material.name == \"Metal\") {\n\n\t\t\t\tmaterials[index].vertexColors = THREE.VertexColors;\n\t\t}\n\t\tif (material.name == \"Light-Metal\") {\n\t\t\t\tmaterials[index].vertexColors = THREE.VertexColors;\n\t\t}\n\t\tif (material.name == \"Red-Metal\") {\n\t\t\t\tmaterials[index].vertexColors = THREE.VertexColors;\n\t\t}\n\t\tif (material.name == \"Glass\") {\n\t\t\t\tmaterials[index].transparent = true;\n\t\t\t\tmaterials[index].opacity = 0.8;\n\t\n\t\t\t\tmaterials[index].color.r = .1;\n\t\t\t\tmaterials[index].color.g =  .5; \n\t\t\t\tmaterials[index].color.b =  .9;\n\t\t\n\t\t\t\tmaterials[index].vertexColors = THREE.VertexColors;\n\n\t\t}\n\t\tif (material.name == \"Dark-Glass\") {\n\t\t\tmaterials[index].shading = THREE.FlatShading;\n\t\t\tmaterials[index].transparent = true;\n\t\t\tmaterials[index].opacity = 0.95;\n\n\t\t\tmaterials[index].vertexColors = THREE.VertexColors;\n\t\t\t\n\t\t}\n\t});\n\tgeometry.faces.forEach(function(face,index){\n\t\tif ((materials[face.materialIndex].name == \"Red-Metal\")&&(useVertexOverrides == true)) {\n\t\t\tface.vertexColors[0] =  new THREE.Color( 0x440000 );\n\t\t\tface.vertexColors[1] =  new THREE.Color( 0x440000 );\n\t\t\tface.vertexColors[2] =  new THREE.Color( 0x550000);\n\t\t\tface.vertexColors[3] =  new THREE.Color( 0x440000 );\n\t\t}\n\t\tif ((materials[face.materialIndex].name == \"Metal\")&&(useVertexOverrides == true)) {\n\t\t\tface.vertexColors[0] =  new THREE.Color( 0x333333 );\n\t\t\tface.vertexColors[1] =  new THREE.Color( 0x222222 );\n\t\t\tface.vertexColors[2] =  new THREE.Color( 0x333333);\n\t\t\tface.vertexColors[3] =  new THREE.Color( 0x333333 );\n\t\t}\n\t\tif ((materials[face.materialIndex].name == \"Light-Metal\")&&(useVertexOverrides == true)) {\n\t\t\tface.vertexColors[0] =  new THREE.Color( 0x666666 );\n\t\t\tface.vertexColors[1] =  new THREE.Color( 0x444444 );\n\t\t\tface.vertexColors[2] =  new THREE.Color( 0x666666);\n\t\t\tface.vertexColors[3] =  new THREE.Color( 0x666666 );\n\t\t}\n\t\tif ((materials[face.materialIndex].name == \"Dark-Glass\")&&(useVertexOverrides == true)) {\n\t\t\tface.vertexColors[0] =  new THREE.Color( 0x112233 );\n\t\t\tface.vertexColors[1] =  new THREE.Color( 0x112233 );\n\t\t\tface.vertexColors[2] =  new THREE.Color( 0x116699);\n\t\t\tface.vertexColors[3] =  new THREE.Color( 0x113355 );\n\t\t}\n\t});\n\tobject = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial( materials ) );\n\tobject.geometry.computeBoundingBox();\n\tobject.name = objectType;\n\tobject.position.set(x, y, z);\n\tobject.scale.set(scale, scale, scale);\n\tobject.matrixAutoUpdate = true;\n\tobject.updateMatrix();\n\tobject.geometry.colorsNeedUpdate = true;\n\treturn object;\n}\nfunction renderObject(mesh, type, instruction) {\n\tmesh.uid = instruction.id;\n\tvar  x = instruction.position.x,\n\t\t\ty = instruction.position.y,\n\t\t\tz = instruction.position.z,\n\t\t\tscale = instruction.scale;\n\n\tif (type == \"environment\") { \n\t\tworld_map.push(mesh);\n\t\tscene.add(world_map[world_map.length-1]);\n\t}\n\tif (type == \"players\") {\n\t\tplayer = mesh;\n\t\tplayer.bullets = [];\n\t\tplayer.moveInterval = new Date().getTime();\n\t\tplayer.username = instruction.username;\n\t\tplayer.rotation.y = instruction.position.rY;\n\t\tplayer.material.materials.forEach(function(material,index){\n\t\t\tplayer.material.materials[index].morphTargets = true;\n\t\t});\n\t\t\n\t\tplayer.velocity = 0;\n\t\t\n\t\tplayer.add(camera);\n\t\tscene.add(player);\n\t\tships.push(player);\n\n\t}\n\tif (type == \"bot\") {\n\t\tvar bot = mesh;\n\t\tbot.bullets = [];\n\t\tbot.id = instruction.id;\n\t\tbot.type = instruction.shipType;\n\t\tbot.rotation.y = instruction.position.rotationY;\n\t\tbot.add(botScope());\n\t\tbots.push(bot);\n\t\tscene.add(bots[bots.length-1]);\n\t}\n}"]],"start1":0,"start2":0,"length1":0,"length2":5354}]],"length":5354}
{"contributors":[],"silentsave":false,"ts":1363689297549,"patch":[[{"diffs":[[0,"*/\n\n"],[-1,"var\tcache = [],\n\t\t"],[1,"\n/*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Globals\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/\n\nvar objects = function() {\n    this.cache =  = [];\n    this."],[0,"worl"]],"start1":716,"start2":716,"length1":26,"length2":402},{"diffs":[[0,"ld_map ="],[1,"  ="],[0," [];"],[1,"\n    \n}\n\n    // based on https://github.com/documentcloud/underscore/blob/bf657be243a075b5e72acc8a83e6f12a564d8f55/underscore.js#L767\nobjects.prototype.new = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n};"],[0,"\n\nfuncti"]],"start1":1117,"start2":1117,"length1":20,"length2":386}]],"length":6096,"saved":false}
{"ts":1363689429547,"patch":[[{"diffs":[[0,".cache ="],[-1,"  ="],[0," [];\n   "]],"start1":1089,"start2":1089,"length1":19,"length2":16},{"diffs":[[0,"ap ="],[-1,"  ="],[0," [];"]],"start1":1118,"start2":1118,"length1":11,"length2":8},{"diffs":[[0,"[];\n    "],[1,"return this;"],[0,"\n}\n\n    "]],"start1":1123,"start2":1123,"length1":16,"length2":28},{"diffs":[[0,"};\n\n"],[-1,"function loadObject"],[1,"objects.prototype.loadObject = function "],[0,"(ins"]],"start1":1499,"start2":1499,"length1":27,"length2":48},{"diffs":[[0,"});\n\t}\n}"],[-1,"\nfunction "],[1,";\n\nobjects.prototype."],[0,"makeObje"]],"start1":2398,"start2":2398,"length1":26,"length2":37},{"diffs":[[0,"jectMesh"],[1," = function "],[0,"(objectT"]],"start1":2433,"start2":2433,"length1":16,"length2":28},{"diffs":[[0,"t;\n}"],[-1,"\nfunction renderObject"],[1,";\n\nobjects.prototype.renderObject = function "],[0,"(mes"]],"start1":5159,"start2":5159,"length1":30,"length2":53},{"diffs":[[0,"th-1]);\n\t}\n}"],[1,";"]],"start1":6157,"start2":6157,"length1":12,"length2":13}]],"length":6170,"saved":false}
{"ts":1363689458274,"patch":[[{"diffs":[[0,"unction() {\n"],[1,"    this = {};\n"],[0,"    this.cac"]],"start1":1069,"start2":1069,"length1":24,"length2":39}]],"length":6185,"saved":false}
